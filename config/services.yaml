# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    domain: '%env(SERVICE_DOMAIN)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    TechDivision\PspMock\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    TechDivision\PspMock\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    TechDivision\PspMock\Service\:
        resource: '../src/Service'
        tags: ['service.service_arguments']

    TechDivision\PspMock\Service\DomainProvider:
        arguments:
            $domain: '%domain%'

    TechDivision\PspMock\Service\Payone\ClientApi\Request\ProcessorFactory:
        arguments:
            $processors:
                creditcardcheck: '@TechDivision\PspMock\Service\Payone\ClientApi\Request\Processor\CreditCardCheck'

    TechDivision\PspMock\Service\Payone\ClientApi\Request\RequestToInputAdapter:
        arguments:
            $dataKeys:
              - request
              - responsetype
              - mode
              - cardpan
              - cardexpiremonth
              - cardexpireyear
              - cardtype
              - cardcvc2
              - callback_method

    TechDivision\PspMock\Service\Payone\ServerApi\Callback\ActionFactory:
        arguments:
            $actions:
                appoint: '@TechDivision\PspMock\Service\Payone\ServerApi\Callback\Action\Appoint'
                pay_partial: '@TechDivision\PspMock\Service\Payone\ServerApi\Callback\Action\PayPartial'
                pay_full: '@TechDivision\PspMock\Service\Payone\ServerApi\Callback\Action\PayFull'
                refund: '@TechDivision\PspMock\Service\Payone\ServerApi\Callback\Action\Refund'

